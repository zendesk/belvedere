
ext {
    javadocTitle = project.ext.javadocTitle
    excludeFiles = []
}

/**
 * Add some dynamic gradle tasks to generate Javadoc. Note that we are excluding R which will result
 * in some warnings but they are less warnings than we'll get if we leave R in.
 */
android.libraryVariants.all { variant ->
    task("${variant.name}Javadoc", type: Javadoc) {
        source = variant.javaCompile.source
        title = javadocTitle

        options.links("http://docs.oracle.com/javase/8/docs/api/");
        options.linksOffline("http://d.android.com/reference", file("extra/javadoc/android-sdk/reference/").absolutePath);
        options.encoding = "UTF-8";

        classpath += files(variant.javaCompile.classpath.files)
        classpath += files(android.getBootClasspath())

        exclude(['**/R.java', '**/BuildConfig.java'] + excludeFiles)
    }
}

/**
 * Add some more dynamic javadoc jar tasks which depend on the dynamic javadoc tasks above. We
 * also add the artifacts to the project which will automatically upload the javadoc jars for us
 * when we invoke :ZendeskCore:uploadArchives.
 */
android.libraryVariants.all { variant ->
    task("${variant.name}JavadocJar", type: Jar, dependsOn: "${variant.name}Javadoc") {
        classifier = 'javadoc'
        from tasks["${variant.name}Javadoc"].destinationDir
    }

    // Only add to archives when we are releasing
    if (variant.name == "release") {
        project.artifacts.add("archives", tasks["${variant.name}JavadocJar"]);
    }
}

/**
 * Disable Java8 lint
 */
if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}